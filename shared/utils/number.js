"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("./core");
var type_1 = require("./type");
/**
 * Returns the absolute value of a number
 *
 * @param val Number
 *
 *      getAbsoluteValue(-20) // 20
 *
 * @returns The absolute value of number.
 */
var getAbsoluteValue = function getAbsoluteValue(val) {
    return Math.abs(val);
};
/**
 * Converts a string to an integer of base 10.
 *
 * @param val String to be parsed.
 *
 *      parse("1234567890") // 1234567890
 *
 * @returns An integer number.
 */
var parse = function parse(val) {
    return parseInt(val, 10);
};
/**
 * Converts a string representation of a hexadecimal number to its equivalent
 * base 10 number.
 *
 * @param val String to be parsed.
 *
 *      parseHex("1234567890ABCDEF")// 1311768467294899700
 *
 * @returns An integer number.
 */
var parseHex = function parseHex(val) {
    return parseInt(val, 16);
};
/**
 * Converts a string representation of a binary number to its equivalent
 * base 10 number.
 *
 * @param val String to be parsed.
 *
 *      parseBin("1001") // 9
 *
 * @returns An integer number.
 */
var parseBin = function parseBin(val) {
    return parseInt(val, 2);
};
/**
 * Converts a string representation of an octal number to its equivalent
 * base 10 number.
 *
 * @param val String to be parsed.
 *
 *      parseBin("1234567") // 342391
 *
 * @returns An integer number.
 */
var parseOct = function parseOct(val) {
    return parseInt(val, 8);
};
/**
 * Converts a string to a float.
 *
 * @param val string that represents the value to be parsed.
 *
 * @returns  floating point number parsed from the given string.
 */
var parseFloatNumbers = function parseFloatNumbers(val) {
    return parseFloat(val);
};
/**
 * Extracts numeric values from a string.
 *
 *	extract("sf2sw4r33fdg4")// 24334
 *
 * @param val String containing digits to be extracted like "as34ft2g5".
 *
 * @returns number containing the extracted digits.
 */
var extract = function extract(val) {
    var nums = val.match(/[0-9]+/g);
    if (nums) {
        return core_1.default.isNull(nums) ? null : parse(nums.join(""));
    }
    else {
        return null;
    }
};
/**
 * Converts to String.
 *
 * @param value Value to be converted to string.
 *
 * @returns String representation of value.
 */
var stringify = function stringify(value) {
    if (type_1.default.isNumber(value, true)) {
        return value.toString();
    }
    return value;
};
/**
 * Generate a random number within a range.
 *
 * @param len Upper bound for the rnadom number.
 *
 * @returns a random number within the range 0-len.
 */
var random = function random(len) {
    return Math.floor((Math.random() * len));
};
/**
 * Rounds off a number to fixed decimal places.
 *
 * @param value Value to be round off.
 * @param decimals Number of decimal points , default 2.
 * @param roundUp Optional .
 *
 * @returns number round to the specified decimal places.
 */
var toFixed = function toFixed(value, decimals, roundUp) {
    if (!type_1.default.isNumber(decimals)) {
        decimals = 2;
    }
    roundUp = core_1.default.coalesce(roundUp, true);
    var result = +(value + "e" + decimals);
    if (roundUp) {
        result = Math.round(result);
    }
    result = +(result + "e" + -decimals);
    return result.toFixed(decimals);
};
/**
 * Formats a value as percentage according to a  pattern .
 *
 *      formatNumberAsPercentage(435.435456,"###.##") // "435.44%".
 *
 * @param value  Value to be formatted.
 * @param pattern  Pattern to be used e.g. ###.##.
 *
 * @returns  Formated Number as percentage .
 */
var formatNumberAsPercentage = function formatNumberAsPercentage(value, pattern) {
    return formatNumber(value, pattern) + "%";
};
/**
 * Formats a value according to a pattern .
 *
 *      formatNumber(23.4656,"##.##") // "23.47".
 *
 * @param value  Value to be formatted
 * @param pattern  Pattern to be used e.g.:###.## .
 *
 * @returns  Formated Number .
 */
var formatNumber = function formatNumber(value, pattern) {
    // eg. Pattern - ###,###.##
    var formattedNumber;
    if (core_1.default.isEmpty(value) || core_1.default.isEmpty(pattern)) {
        return value;
    }
    var temp = type_1.default.isString(value) ? value : "" + value;
    if (pattern.length > 0 && temp.length > 0) {
        var patternSplitByDecimal = pattern.split(".");
        var formattedInteger = void 0;
        var patternDecimalLength = 0;
        var formattedDecimalPart = "";
        if (patternSplitByDecimal.length > 1) {
            patternDecimalLength = patternSplitByDecimal[1].length;
        }
        value = roundNumber(temp, patternDecimalLength);
        var numberSplitbyDecimal = temp.split(".");
        formattedInteger = formatInteger(patternSplitByDecimal, numberSplitbyDecimal[0]);
        if (numberSplitbyDecimal.length > 1) {
            formattedDecimalPart = formatDecimal(patternDecimalLength, numberSplitbyDecimal[1]);
        }
        formattedNumber = formattedInteger + formattedDecimalPart;
    }
    return formattedNumber;
};
var roundNumber = function roundNumber(value, patternDecimalLength) {
    var roundingFactor = Math.pow(10, patternDecimalLength);
    return (Math.round(value * roundingFactor) / roundingFactor) + "";
};
var formatInteger = function formatInteger(patternSplitByDecimal, integerPart) {
    var digitsTraversed = 0;
    var seperatedInteger = [];
    var patternSplitByComma = patternSplitByDecimal[0].split(",");
    patternSplitByComma.reverse().forEach(function (element, index, array) {
        var sectionLength = element.length;
        var start = (integerPart.length - (sectionLength + digitsTraversed)) < 0 ? 0 : (integerPart.length - (sectionLength + digitsTraversed));
        var end = (integerPart.length - digitsTraversed) < 0 ? 0 : (integerPart.length - digitsTraversed);
        digitsTraversed += sectionLength;
        if (end > 0) {
            seperatedInteger.push(integerPart.slice(start, end));
        }
    });
    if (digitsTraversed < integerPart.length) {
        seperatedInteger[seperatedInteger.length - 1] = integerPart.slice(0, (integerPart.length - digitsTraversed)).concat(seperatedInteger[seperatedInteger.length - 1]);
    }
    return seperatedInteger.reverse().join(",");
};
var formatDecimal = function formatDecimal(patternDecimalLength, decimalPart) {
    var formattedDecimalPart;
    if (core_1.default.isNotNull(decimalPart)) {
        if (patternDecimalLength > 0) {
            formattedDecimalPart = decimalPart.substring(0, patternDecimalLength);
        }
    }
    if (formattedDecimalPart) {
        return (core_1.default.isNotNull(formattedDecimalPart) ? "." + formattedDecimalPart : "");
    }
    else {
        return null;
    }
};
exports.default = {
    getAbsoluteValue: getAbsoluteValue, parse: parse, parseHex: parseHex, parseBin: parseBin, parseOct: parseOct, parseFloatNumbers: parseFloatNumbers, extract: extract, stringify: stringify, random: random, toFixed: toFixed, formatNumberAsPercentage: formatNumberAsPercentage, formatNumber: formatNumber
};
//# sourceMappingURL=data:application/json;base64,