"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var type_1 = require("./type");
var core_1 = require("./core");
var URL_TOKEN = "@href";
var ResourceHelper = (function () {
    function ResourceHelper(tagName, urlAttr, attrs) {
        this.tagName = tagName;
        this.urlAttr = urlAttr;
        this.attrs = attrs;
        this.resourceSelector = "head " + this.tagName + "[" + this.urlAttr + "='" + URL_TOKEN + "']";
    }
    /**
     * Checks whether a resource is atttached to an element in dom.
     *
     * @param href Name of the resource.
     *
     * @returns True if attached.
     */
    ResourceHelper.prototype.isAttached = function (href) {
        var resource = document.querySelectorAll(this.resourceSelector.replace(URL_TOKEN, href));
        return resource.length > 0;
    };
    /**
     * Attaches the specified Resources .
     *
     * @param href Resources to be attached.
     *
     */
    ResourceHelper.prototype.attach = function (href, options) {
        /* We can attach multiple resources at a time*/
        var urls = !type_1.default.isArray(href) ? [href] : href;
        var out = [];
        var url;
        for (var i = 0; i < urls.length; i++) {
            url = urls[i];
            if (!out) {
                out = [];
            }
            var resource = document.querySelectorAll(this.resourceSelector.replace(URL_TOKEN, url));
            if (resource.length > 0) {
                out.push(resource);
            }
            else {
                var res = document.createElement(this.tagName);
                for (var attr in this.attrs) {
                    if (!this.attrs.hasOwnProperty(attr)) {
                        continue;
                    }
                    res[attr] = this.attrs[attr];
                }
                if (core_1.default.isNotNull(options)) {
                    for (var attr in options) {
                        if (!options.hasOwnProperty(attr) || attr === "parent") {
                            continue;
                        }
                        res[attr] = options[attr];
                    }
                }
                document.querySelector(options && options.parent ? options.parent : "head").appendChild(res);
                res[this.urlAttr] = url;
            }
        }
        return out && out.length === 1 && !type_1.default.isArray(href) ? out[0] : out;
    };
    /**
     * Detaches resources from DOM.
     *
     * @param href Name of resources to be detached.
     * @param eventListeners Event Listeners attached to the element.
     *
     * @returns The Detached Elements.
     */
    ResourceHelper.prototype.detach = function (href) {
        var eventListeners = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            eventListeners[_i - 1] = arguments[_i];
        }
        var out = [];
        var urls = !type_1.default.isArray(href) ? [href] : href;
        for (var i = 0; i < urls.length; i++) {
            var url = urls[i];
            var resource = document.querySelectorAll(this.resourceSelector.replace(URL_TOKEN, url));
            if (resource.length === 0) {
                continue;
            }
            var len = eventListeners.length;
            for (var j = 0; j < len; j++) {
                resource[0].removeEventListener(eventListeners[j][0], eventListeners[j][1]);
            }
            var parentNode = resource[0].parentNode;
            if (parentNode) {
                var a = parentNode.removeChild(resource[0]);
                out.push(a);
            }
        }
        return out && out.length === 1 && !type_1.default.isArray(href) ? out[0] : out;
    };
    return ResourceHelper;
}());
exports.default = ResourceHelper;
//# sourceMappingURL=data:application/json;base64,